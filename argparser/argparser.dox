/**\mainpage Argument parser
 * \author		Mao Yu (http://www.mao-yu.com)
 * \date		Created: Friday, May 28, 2010
 * \date		Updated: Saturday, June 26, 2010
 * \par Purpose:
 * Argparser provides simple argument parsing functionality given command line
 * arguments or a configuration file.
 * \par Installation:
 *	-# Downloads:
 *		- <a href="http://github.com/maoserr/C-library/tarball/master">tarball</a>.
 *		- <a href="http://github.com/maoserr/C-library/zipball/master">zip</a>.
 *	-# Add header and source file to your project
 *		- argparser.h
 *		- argparser.c
 * \par Usage:
 *	- Call args_addarg() to add valid options.
 *		this function will copy the short, long, and help string.
 *	- Call args_parse() and pass in \b argc and \b argv to parse.
 *	- Optionally use args_parsefile() to parse a config file.
 *	- Use args_check(),args_getunnamed(),args_getnamed() to detect
 *		arguments.
 *	- Optionally use args_print() to show valid arguments list.
 *	- Optionally use args_unknown() to show unknown arguments.
 *		(this function will return ARGBOOL_TRUE if there are unknowns)
 *	- Call args_free() to free all resources.
 *
 * \note
 * \par
 *	-# Short arguments should be 1 or 2 letters.
 *		- Example: '-o', or config file format 'o'
 *	-# Long arguments needs to be longer than 3 letters and shorter than 10.
 *		- Example: '-one', or config file format 'one'
 *	-# Arguments that accept values are space delimited in command line, but '='
 *	delimited in config file
 *		- Example '-type moose', or config file format 'type=moose'
 *	-# Unnamed arguments are arguments that are not prefixed with '-' and are
 *	not values for named arguments.
 *	-# Unknown arguments are arguments prefixed with '-' but are not validly
 *	added arguments.
 *
 *	\par An example program
 *	\code
 * #include <stdio.h>
 * #include "argparser.h"
 *
 * int main( int argc, char *argv[] ){
 * 	args_addarg("a","all","Do all things",ARGVAL_NONE);
 * 	args_addarg("v",NULL,"Set verbosity level",ARGVAL_STRING);
 * 	args_addarg(NULL,"yo-dawg","Yo dawg",ARGVAL_STRING);
 * 	args_addarg("h","help","Display help",ARGVAL_NONE);
 * 	// The following will be discarded
 * 	args_addarg(NULL,NULL,"No names!",ARGVAL_NONE);
 *
 * 	if( (args_parse(argc,argv) != ARGRET_OK) &&
 * 			(args_parsefile("./testconfig") != ARGRET_OK) )
 * 		printf("Error occurred parsing command line.\n");
 * 	else{
 * 		ArgStr verbosity;
 * 		ArgStr unnamed[3];
 *
 * 		if( args_check("a") )
 * 			printf("Doing all things!\n");
 * 		if( verbosity = args_getnamed("v") )
 * 			printf("Verbosity set to %s.\n",verbosity);
 * 		if( args_check("h") )
 * 			args_print();
 * 		if( unnamed[0] = args_getunnamed(1) )
 * 			printf("First unnamed: %s.\n",unnamed[0]);
 * 		if( unnamed[1] = args_getunnamed(2) )
 * 			printf("Second unnamed: %s.\n",unnamed[1]);
 * 		if( unnamed[2] = args_getunnamed(3) )
 * 			printf("Third unnamed: %s.\n",unnamed[2]);
 * 		args_unknown();
 * 	}
 * 	args_free();
 * }
 *	\endcode
 * Running this code with this command:
\verbatim
argparser -a -v DEBUG hello you good people
\endverbatim
 * Will show this output:
\verbatim
Doing all things!
Verbosity set to DEBUG.
First unnamed: hello.
Second unnamed: you.
Third unnamed: good.
\endverbatim
 *	See \ref argparser.h "here" for full API documentation.
 *
 * \par License
 * This is public domain code.
 */
